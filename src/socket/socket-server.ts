import express from "express";
import http from "http";
import { Server } from "socket.io";
import mongoose from "mongoose";
import User from "../models/user.model";

/**
 * CALL MANAGEMENT FEATURES ADDED:
 *
 * ‚úÖ NgƒÉn ch·∫∑n multiple calls c√πng l√∫c:
 *    - Ki·ªÉm tra ng∆∞·ªùi g·ªçi ƒëang trong cu·ªôc g·ªçi kh√°c ‚Üí CALLER_IN_CALL
 *    - Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n ƒëang b·∫≠n ‚Üí RECEIVER_BUSY
 *
 * ‚úÖ Qu·∫£n l√Ω tr·∫°ng th√°i cu·ªôc g·ªçi:
 *    - activeCall: Record theo d√µi cu·ªôc g·ªçi hi·ªán t·∫°i c·ªßa t·ª´ng user
 *    - startCall(): ƒê√°nh d·∫•u b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi
 *    - endCall(): K·∫øt th√∫c cu·ªôc g·ªçi
 *    - isUserInCall(): Ki·ªÉm tra user c√≥ ƒëang trong cu·ªôc g·ªçi
 *
 * ‚úÖ Auto cleanup khi:
 *    - User t·ª´ ch·ªëi cu·ªôc g·ªçi (answerCall v·ªõi accepted: false)
 *    - User k·∫øt th√∫c cu·ªôc g·ªçi (endCall event)
 *    - User disconnect ‚Üí T·ª± ƒë·ªông ng·∫Øt cu·ªôc g·ªçi v√† th√¥ng b√°o
 *
 * ‚úÖ Event m·ªõi:
 *    - checkCallStatus: Ki·ªÉm tra tr·∫°ng th√°i cu·ªôc g·ªçi
 *    - callStatusResponse: Tr·∫£ v·ªÅ th√¥ng tin tr·∫°ng th√°i
 *
 * Error codes m·ªõi: CALLER_IN_CALL, RECEIVER_BUSY, CHECK_STATUS_ERROR
 */

// Simple logger utility
const logger = {
  success: (...args: any[]) => console.log("‚úÖ", ...args),
  info: (...args: any[]) => console.log("‚ÑπÔ∏è", ...args),
  warning: (...args: any[]) => console.log("‚ö†Ô∏è", ...args),
  error: (...args: any[]) => console.error("‚ùå", ...args),
};

const app = express();
const server = http.createServer(app);

// C·∫•u h√¨nh Socket.IO server v·ªõi CORS v√† timeout settings
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL || "http://localhost:3000",
    methods: ["GET", "POST"],
    credentials: true,
  },
  pingInterval: 25000, // Th·ªùi gian g·ª≠i ping ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi (25 gi√¢y)
  pingTimeout: 60000, // Th·ªùi gian ch·ªù pong tr·∫£ v·ªÅ tr∆∞·ªõc khi disconnect (60 gi√¢y)
  upgradeTimeout: 25000, // Th·ªùi gian ch·ªù upgrade t·ª´ polling l√™n websocket (25 gi√¢y)
  maxHttpBufferSize: 1e6, // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc buffer (1MB)
  transports: ["polling", "websocket"], // Cho ph√©p c·∫£ polling v√† websocket
});

// Chuy·ªÉn userId th√†nh ObjectId ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi MongoDB
const convertToObjectId = (userId: string): mongoose.Types.ObjectId => {
  try {
    return new mongoose.Types.ObjectId(userId);
  } catch (error) {
    console.error(`‚ùå L·ªói convert ObjectId cho userId: ${userId}`, error);
    throw new Error("Invalid userId format");
  }
};

// Danh s√°ch qu·∫£n l√Ω user online theo socket
// Key: userId, Value: Set ch·ª©a c√°c socketId (1 user c√≥ th·ªÉ c√≥ nhi·ªÅu tab/socket)
const userSocketMap: Record<string, Set<string>> = {};

// Danh s√°ch qu·∫£n l√Ω ph√≤ng chat
// Key: roomId, Value: Set ch·ª©a c√°c userId tham gia ph√≤ng
const roomParticipants: Record<string, Set<string>> = {};

// Danh s√°ch theo d√µi tr·∫°ng th√°i typing
// Key: "senderId_receiverId", Value: timeout ID ƒë·ªÉ clear typing
const typingTimeouts: Record<string, NodeJS.Timeout> = {};

// Qu·∫£n l√Ω tr·∫°ng th√°i cu·ªôc g·ªçi
// Key: userId, Value: { callerId, receiverId, callType, startTime }
const activeCall: Record<
  string,
  {
    callerId: string;
    receiverId: string;
    callType: string;
    startTime: Date;
  } | null
> = {};

// Statistics ƒë·ªÉ monitor
const connectionStats = {
  totalConnections: 0,
  currentConnections: 0,
  messagesSent: 0,
  callsInitiated: 0,
};

// C·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông cu·ªëi c√πng c·ªßa user trong database
const updateLastActiveTime = async (userId: string): Promise<void> => {
  try {
    const userObj = convertToObjectId(userId);
    await User.findByIdAndUpdate(userObj, {
      lastActiveAt: new Date(),
      isOnline: true, // ƒê√°nh d·∫•u user ƒëang online
    });
    logger.success(`C·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông cu·ªëi cho user: ${userId}`);
  } catch (error) {
    logger.error(`L·ªói c·∫≠p nh·∫≠t lastActive cho user ${userId}:`, error);
  }
};

// ƒê√°nh d·∫•u user offline khi disconnect ho√†n to√†n
const markUserOffline = async (userId: string): Promise<void> => {
  try {
    const userObj = convertToObjectId(userId);
    await User.findByIdAndUpdate(userObj, {
      lastActiveAt: new Date(),
      isOnline: false, // ƒê√°nh d·∫•u user offline
    });
    logger.info(`ƒê√°nh d·∫•u user offline: ${userId}`);
  } catch (error) {
    logger.error(`L·ªói ƒë√°nh d·∫•u user offline ${userId}:`, error);
  }
};

// L·∫•y danh s√°ch t·∫•t c·∫£ socket IDs c·ªßa m·ªôt user
export const getReceiverSocketIds = (userId: string): string[] => {
  return userSocketMap[userId] ? Array.from(userSocketMap[userId]) : [];
};

// L·∫•y danh s√°ch t·∫•t c·∫£ user ƒëang online
const getOnlineUsers = (): string[] => {
  return Object.keys(userSocketMap);
};

// Ki·ªÉm tra user c√≥ online kh√¥ng
const isUserOnline = (userId: string): boolean => {
  return userSocketMap[userId] && userSocketMap[userId].size > 0;
};

// =============== CALL MANAGEMENT FUNCTIONS ===============

// Ki·ªÉm tra user c√≥ ƒëang trong cu·ªôc g·ªçi kh√¥ng
const isUserInCall = (userId: string): boolean => {
  return activeCall[userId] !== null && activeCall[userId] !== undefined;
};

// ƒê√°nh d·∫•u user b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi
const startCall = (
  callerId: string,
  receiverId: string,
  callType: string
): void => {
  const callData = { callerId, receiverId, callType, startTime: new Date() };
  activeCall[callerId] = callData;
  activeCall[receiverId] = callData;
  logger.info(`üìû B·∫Øt ƒë·∫ßu cu·ªôc g·ªçi ${callType}: ${callerId} ‚Üí ${receiverId}`);
};

// K·∫øt th√∫c cu·ªôc g·ªçi
const endCall = (userId1: string, userId2: string): void => {
  if (activeCall[userId1]) {
    logger.info(`üìû K·∫øt th√∫c cu·ªôc g·ªçi: ${userId1} ‚Üî ${userId2}`);
  }
  activeCall[userId1] = null;
  activeCall[userId2] = null;
};

// L·∫•y th√¥ng tin cu·ªôc g·ªçi hi·ªán t·∫°i c·ªßa user
const getUserCallInfo = (userId: string) => {
  return activeCall[userId];
};

// Validate d·ªØ li·ªáu tin nh·∫Øn
const validateMessageData = (data: {
  receiverId?: string;
  message?: string;
  senderId?: string;
}): boolean => {
  return !!(
    data.receiverId &&
    data.message &&
    data.senderId &&
    data.message.trim().length > 0 &&
    data.message.length <= 1000
  );
};

// Validate d·ªØ li·ªáu cu·ªôc g·ªçi
const validateCallData = (data: {
  receiverId?: string;
  callerId?: string;
  peerId?: string;
}): boolean => {
  return !!(data.receiverId && data.callerId && data.peerId);
};

// X·ª≠ l√Ω khi user k·∫øt n·ªëi socket
const handleUserConnection = async (
  socket: any,
  userId: string
): Promise<void> => {
  try {
    // Kh·ªüi t·∫°o Set cho user n·∫øu ch∆∞a c√≥
    if (!userSocketMap[userId]) {
      userSocketMap[userId] = new Set();
    }

    // Th√™m socket ID v√†o danh s√°ch c·ªßa user
    userSocketMap[userId].add(socket.id);

    // C·∫≠p nh·∫≠t th√¥ng tin trong database
    await updateLastActiveTime(userId);

    // C·∫≠p nh·∫≠t th·ªëng k√™ d√πng ƒë·ªÉ th·ªëng k√™ c√°c k·∫øt n·ªëi
    connectionStats.currentConnections++;
    connectionStats.totalConnections++;

    logger.success(
      `User k·∫øt n·ªëi: ${userId} | Socket: ${socket.id} | T·ªïng socket: ${userSocketMap[userId].size}`
    );

    // G·ª≠i danh s√°ch user online cho t·∫•t c·∫£ clients
    io.emit("getOnlineUsers", getOnlineUsers());

    // G·ª≠i th√¥ng b√°o user v·ª´a online (tr·ª´ ch√≠nh user ƒë√≥)
    socket.broadcast.emit("userStatusChanged", {
      userId,
      status: "online",
      lastActiveAt: new Date(),
    });
  } catch (error) {
    logger.error(`L·ªói x·ª≠ l√Ω k·∫øt n·ªëi user ${userId}:`, error);
    socket.emit("error", {
      message: "L·ªói k·∫øt n·ªëi server",
      code: "CONNECTION_ERROR",
    });
  }
};

// X·ª≠ l√Ω khi user ng·∫Øt k·∫øt n·ªëi socket
const handleUserDisconnection = async (
  socket: any,
  userId: string
): Promise<void> => {
  try {
    // ‚úÖ K·∫æT TH√öC CU·ªòC G·ªåI KHI DISCONNECT
    if (isUserInCall(userId)) {
      const callInfo = getUserCallInfo(userId);
      if (callInfo) {
        // T√¨m user c√≤n l·∫°i trong cu·ªôc g·ªçi
        const otherUserId =
          callInfo.callerId === userId
            ? callInfo.receiverId
            : callInfo.callerId;

        if (otherUserId) {
          endCall(userId, otherUserId);

          // Th√¥ng b√°o cu·ªôc g·ªçi b·ªã ng·∫Øt do disconnect
          const otherUserSockets = getReceiverSocketIds(otherUserId);
          otherUserSockets.forEach((socketId: string) => {
            io.to(socketId).emit("callEnded", {
              callerId: userId,
              reason: "disconnect",
            });
          });

          logger.warning(`üìû Cu·ªôc g·ªçi b·ªã ng·∫Øt do ${userId} disconnect`);
        }
      }
    }

    // X√≥a socket ID kh·ªèi danh s√°ch c·ªßa user
    if (userSocketMap[userId]) {
      userSocketMap[userId].delete(socket.id);

      // N·∫øu user h·∫øt socket th√¨ x√≥a kh·ªèi danh s√°ch online
      if (userSocketMap[userId].size === 0) {
        delete userSocketMap[userId];
        // ƒê√°nh d·∫•u user offline trong database
        await markUserOffline(userId);

        // Th√¥ng b√°o user offline
        socket.broadcast.emit("userStatusChanged", {
          userId,
          status: "offline",
          lastActiveAt: new Date(),
        });
      } else {
        // User v·∫´n c√≤n socket kh√°c, ch·ªâ c·∫≠p nh·∫≠t lastActive
        await updateLastActiveTime(userId);
      }
    }

    // C·∫≠p nh·∫≠t th·ªëng k√™
    connectionStats.currentConnections = Math.max(
      0,
      connectionStats.currentConnections - 1
    );

    logger.info(
      `User ng·∫Øt k·∫øt n·ªëi: ${userId} | Socket: ${socket.id} | Socket c√≤n l·∫°i: ${
        userSocketMap[userId]?.size || 0
      }`
    );

    // G·ª≠i danh s√°ch user online c·∫≠p nh·∫≠t
    io.emit("getOnlineUsers", getOnlineUsers());
  } catch (error) {
    logger.error(`L·ªói x·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi user ${userId}:`, error);
  }
};

// X·ª≠ l√Ω g·ª≠i tin nh·∫Øn chat realtime
const handleChatMessage = (
  socket: any,
  data: {
    receiverId: string;
    message: string;
    senderId: string;
    messageType?: string;
  }
): void => {
  try {
    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!validateMessageData(data)) {
      socket.emit("error", {
        message: "D·ªØ li·ªáu tin nh·∫Øn kh√¥ng h·ª£p l·ªá",
        code: "INVALID_MESSAGE_DATA",
      });
      return;
    }

    const { receiverId, message, senderId, messageType = "text" } = data;

    // L·∫•y danh s√°ch socket c·ªßa ng∆∞·ªùi nh·∫≠n
    const receiverSockets = getReceiverSocketIds(receiverId);

    // Chu·∫©n b·ªã d·ªØ li·ªáu tin nh·∫Øn
    const messageData = {
      senderId,
      receiverId,
      message: message.trim(),
      messageType,
      timestamp: new Date(),
      messageId: new mongoose.Types.ObjectId().toString(), // T·∫°o ID t·∫°m cho message
    };

    // G·ª≠i tin nh·∫Øn t·ªõi t·∫•t c·∫£ socket c·ªßa ng∆∞·ªùi nh·∫≠n
    receiverSockets.forEach((socketId: string) => {
      io.to(socketId).emit("newMessage", messageData);
    });

    // G·ª≠i confirmation cho ng∆∞·ªùi g·ª≠i
    socket.emit("messageDelivered", {
      messageId: messageData.messageId,
      deliveredAt: new Date(),
      receiverOnline: receiverSockets.length > 0,
    });

    // C·∫≠p nh·∫≠t th·ªëng k√™
    connectionStats.messagesSent++;

    logger.info(
      `üì® Tin nh·∫Øn t·ª´ ${senderId} ƒë·∫øn ${receiverId}: "${message.substring(
        0,
        50
      )}${message.length > 50 ? "..." : ""}"`
    );
  } catch (error) {
    logger.error("L·ªói x·ª≠ l√Ω tin nh·∫Øn chat:", error);
    socket.emit("error", {
      message: "L·ªói g·ª≠i tin nh·∫Øn",
      code: "MESSAGE_ERROR",
    });
  }
};

// X·ª≠ l√Ω cu·ªôc g·ªçi video/audio (g·ª≠i peerId cho receiver)
const handleSendPeerId = (
  socket: any,
  data: {
    receiverId: string;
    callerId: string;
    peerId: string;
    callType?: string;
  }
): void => {
  try {
    // Validate d·ªØ li·ªáu cu·ªôc g·ªçi
    if (!validateCallData(data)) {
      socket.emit("callError", {
        message: "D·ªØ li·ªáu cu·ªôc g·ªçi kh√¥ng h·ª£p l·ªá",
        code: "INVALID_CALL_DATA",
      });
      return;
    }

    const { receiverId, callerId, peerId, callType = "video" } = data;

    // Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n c√≥ online kh√¥ng
    const receiverSockets = getReceiverSocketIds(receiverId);
    if (receiverSockets.length === 0) {
      socket.emit("callError", {
        message: "Ng∆∞·ªùi nh·∫≠n kh√¥ng tr·ª±c tuy·∫øn",
        code: "USER_OFFLINE",
      });
      logger.warning(`üìû Cu·ªôc g·ªçi th·∫•t b·∫°i: ${receiverId} kh√¥ng online`);
      return;
    }

    // ‚úÖ KI·ªÇM TRA NG∆Ø·ªúI G·ªåI ƒêANG TRONG CU·ªòC G·ªåI KH√ÅC
    if (isUserInCall(callerId)) {
      socket.emit("callError", {
        message: "B·∫°n ƒëang trong cu·ªôc g·ªçi kh√°c",
        code: "CALLER_IN_CALL",
      });
      logger.warning(
        `üìû Cu·ªôc g·ªçi th·∫•t b·∫°i: ${callerId} ƒëang trong cu·ªôc g·ªçi kh√°c`
      );
      return;
    }

    // ‚úÖ KI·ªÇM TRA NG∆Ø·ªúI NH·∫¨N ƒêANG TRONG CU·ªòC G·ªåI KH√ÅC
    if (isUserInCall(receiverId)) {
      socket.emit("callError", {
        message: "Ng∆∞·ªùi nh·∫≠n ƒëang b·∫≠n",
        code: "RECEIVER_BUSY",
      });
      logger.warning(`üìû Cu·ªôc g·ªçi th·∫•t b·∫°i: ${receiverId} ƒëang b·∫≠n`);
      return;
    }

    // ‚úÖ ƒê√ÅNH D·∫§U B·∫ÆT ƒê·∫¶U CU·ªòC G·ªåI
    startCall(callerId, receiverId, callType);

    const callData = {
      callerId,
      peerId,
      callType,
      timestamp: new Date(),
    };

    // G·ª≠i th√¥ng tin cu·ªôc g·ªçi t·ªõi t·∫•t c·∫£ socket c·ªßa ng∆∞·ªùi nh·∫≠n
    receiverSockets.forEach((socketId: string) => {
      io.to(socketId).emit("receivePeerId", callData);
      io.to(socketId).emit("incomingCall", callData);
    });

    // C·∫≠p nh·∫≠t th·ªëng k√™
    connectionStats.callsInitiated++;

    logger.success(
      `üìû Cu·ªôc g·ªçi ${callType} t·ª´ ${callerId} ƒë·∫øn ${receiverId} (peerId: ${peerId})`
    );
  } catch (error) {
    logger.error("L·ªói x·ª≠ l√Ω cu·ªôc g·ªçi:", error);
    socket.emit("callError", {
      message: "L·ªói k·∫øt n·ªëi cu·ªôc g·ªçi",
      code: "CALL_ERROR",
    });
  }
};

// X·ª≠ l√Ω g·ª≠i notification realtime
const handleNotification = (
  socket: any,
  data: {
    receiverId: string;
    notification: {
      type: string;
      title: string;
      message: string;
      senderId?: string;
      relatedId?: string;
    };
  }
): void => {
  try {
    const { receiverId, notification } = data;

    // Validate c∆° b·∫£n
    if (!receiverId || !notification?.title || !notification?.message) {
      socket.emit("error", {
        message: "D·ªØ li·ªáu notification kh√¥ng h·ª£p l·ªá",
        code: "INVALID_NOTIFICATION_DATA",
      });
      return;
    }

    const receiverSockets = getReceiverSocketIds(receiverId);

    const notificationData = {
      ...notification,
      timestamp: new Date(),
      isRead: false,
      notificationId: new mongoose.Types.ObjectId().toString(),
    };

    // G·ª≠i notification t·ªõi t·∫•t c·∫£ socket c·ªßa ng∆∞·ªùi nh·∫≠n
    receiverSockets.forEach((socketId: string) => {
      io.to(socketId).emit("notification", notificationData);
    });

    logger.info(`üîî Notification g·ª≠i ƒë·∫øn ${receiverId}: ${notification.title}`);
  } catch (error) {
    logger.error("L·ªói x·ª≠ l√Ω notification:", error);
    socket.emit("error", {
      message: "L·ªói g·ª≠i th√¥ng b√°o",
      code: "NOTIFICATION_ERROR",
    });
  }
};

// X·ª≠ l√Ω typing indicator
const handleTypingStart = (
  socket: any,
  data: { receiverId: string; senderId: string }
): void => {
  try {
    const { receiverId, senderId } = data;

    if (!receiverId || !senderId) {
      return;
    }

    const typingKey = `${senderId}_${receiverId}`;

    // Clear timeout c≈© n·∫øu c√≥
    if (typingTimeouts[typingKey]) {
      clearTimeout(typingTimeouts[typingKey]);
    }

    // G·ª≠i typing indicator ƒë·∫øn ng∆∞·ªùi nh·∫≠n
    const receiverSockets = getReceiverSocketIds(receiverId);
    receiverSockets.forEach((socketId: string) => {
      io.to(socketId).emit("userTyping", {
        senderId,
        isTyping: true,
        timestamp: new Date(),
      });
    });

    // T·ª± ƒë·ªông t·∫Øt typing sau 3 gi√¢y
    typingTimeouts[typingKey] = setTimeout(() => {
      receiverSockets.forEach((socketId: string) => {
        io.to(socketId).emit("userTyping", {
          senderId,
          isTyping: false,
          timestamp: new Date(),
        });
      });
      delete typingTimeouts[typingKey];
    }, 3000);
  } catch (error) {
    logger.error("L·ªói x·ª≠ l√Ω typing start:", error);
  }
};

// X·ª≠ l√Ω d·ª´ng typing
const handleTypingStop = (
  socket: any,
  data: { receiverId: string; senderId: string }
): void => {
  try {
    const { receiverId, senderId } = data;

    if (!receiverId || !senderId) {
      return;
    }

    const typingKey = `${senderId}_${receiverId}`;

    // Clear timeout
    if (typingTimeouts[typingKey]) {
      clearTimeout(typingTimeouts[typingKey]);
      delete typingTimeouts[typingKey];
    }

    // G·ª≠i stop typing ƒë·∫øn ng∆∞·ªùi nh·∫≠n
    const receiverSockets = getReceiverSocketIds(receiverId);
    receiverSockets.forEach((socketId: string) => {
      io.to(socketId).emit("userTyping", {
        senderId,
        isTyping: false,
        timestamp: new Date(),
      });
    });
  } catch (error) {
    logger.error("L·ªói x·ª≠ l√Ω typing stop:", error);
  }
};

// X·ª≠ l√Ω ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
const handleMarkMessageSeen = (
  socket: any,
  data: { messageId: string; senderId: string; userId: string }
): void => {
  try {
    const { messageId, senderId, userId } = data;

    if (!messageId || !senderId || !userId) {
      return;
    }

    // G·ª≠i th√¥ng b√°o ƒë√£ ƒë·ªçc cho ng∆∞·ªùi g·ª≠i
    const senderSockets = getReceiverSocketIds(senderId);
    const seenData = {
      messageId,
      userId,
      seenAt: new Date(),
    };

    senderSockets.forEach((socketId: string) => {
      io.to(socketId).emit("messageSeen", seenData);
    });

    logger.info(`üëÅÔ∏è Message ${messageId} ƒë√£ ƒë∆∞·ª£c ƒë·ªçc b·ªüi ${userId}`);
  } catch (error) {
    logger.error("L·ªói x·ª≠ l√Ω mark message seen:", error);
  }
};

// X·ª≠ l√Ω join ph√≤ng chat
const handleJoinRoom = (
  socket: any,
  data: { roomId: string; userId: string }
): void => {
  try {
    const { roomId, userId } = data;

    if (!roomId || !userId) {
      socket.emit("error", {
        message: "Thi·∫øu th√¥ng tin ph√≤ng ho·∫∑c user",
        code: "MISSING_ROOM_DATA",
      });
      return;
    }

    // Th√™m user v√†o ph√≤ng
    if (!roomParticipants[roomId]) {
      roomParticipants[roomId] = new Set();
    }
    roomParticipants[roomId].add(userId);

    // Socket join room
    socket.join(roomId);

    // Th√¥ng b√°o cho c√°c th√†nh vi√™n kh√°c trong ph√≤ng
    socket.to(roomId).emit("userJoinedRoom", {
      userId,
      roomId,
      timestamp: new Date(),
    });

    // G·ª≠i danh s√°ch th√†nh vi√™n hi·ªán t·∫°i
    socket.emit("roomParticipants", {
      roomId,
      participants: Array.from(roomParticipants[roomId]),
    });

    logger.success(`üè† User ${userId} tham gia ph√≤ng ${roomId}`);
  } catch (error) {
    logger.error("L·ªói join room:", error);
    socket.emit("error", {
      message: "L·ªói tham gia ph√≤ng",
      code: "JOIN_ROOM_ERROR",
    });
  }
};

// X·ª≠ l√Ω leave ph√≤ng chat
const handleLeaveRoom = (
  socket: any,
  data: { roomId: string; userId: string }
): void => {
  try {
    const { roomId, userId } = data;

    if (!roomId || !userId) {
      return;
    }

    // X√≥a user kh·ªèi ph√≤ng
    if (roomParticipants[roomId]) {
      roomParticipants[roomId].delete(userId);

      // N·∫øu ph√≤ng tr·ªëng th√¨ x√≥a
      if (roomParticipants[roomId].size === 0) {
        delete roomParticipants[roomId];
      }
    }

    // Socket leave room
    socket.leave(roomId);

    // Th√¥ng b√°o cho c√°c th√†nh vi√™n kh√°c
    socket.to(roomId).emit("userLeftRoom", {
      userId,
      roomId,
      timestamp: new Date(),
    });

    logger.info(`üö™ User ${userId} r·ªùi ph√≤ng ${roomId}`);
  } catch (error) {
    logger.error("L·ªói leave room:", error);
  }
};

// X·ª≠ l√Ω g·ª≠i tin nh·∫Øn trong ph√≤ng
const handleRoomMessage = (
  socket: any,
  data: {
    roomId: string;
    message: string;
    senderId: string;
    messageType?: string;
  }
): void => {
  try {
    const { roomId, message, senderId, messageType = "text" } = data;

    if (!roomId || !message || !senderId || message.trim().length === 0) {
      socket.emit("error", {
        message: "D·ªØ li·ªáu tin nh·∫Øn ph√≤ng kh√¥ng h·ª£p l·ªá",
        code: "INVALID_ROOM_MESSAGE",
      });
      return;
    }

    const messageData = {
      roomId,
      senderId,
      message: message.trim(),
      messageType,
      timestamp: new Date(),
      messageId: new mongoose.Types.ObjectId().toString(),
    };

    // G·ª≠i tin nh·∫Øn t·ªõi t·∫•t c·∫£ th√†nh vi√™n trong ph√≤ng (tr·ª´ ng∆∞·ªùi g·ª≠i)
    socket.to(roomId).emit("newRoomMessage", messageData);

    // G·ª≠i confirmation cho ng∆∞·ªùi g·ª≠i
    socket.emit("roomMessageDelivered", {
      messageId: messageData.messageId,
      roomId,
      deliveredAt: new Date(),
    });

    logger.info(
      `üè†üí¨ Tin nh·∫Øn ph√≤ng ${roomId} t·ª´ ${senderId}: "${message.substring(
        0,
        50
      )}${message.length > 50 ? "..." : ""}"`
    );
  } catch (error) {
    logger.error("L·ªói g·ª≠i tin nh·∫Øn ph√≤ng:", error);
    socket.emit("error", {
      message: "L·ªói g·ª≠i tin nh·∫Øn ph√≤ng",
      code: "ROOM_MESSAGE_ERROR",
    });
  }
};

// L·∫•y th·ªëng k√™ k·∫øt n·ªëi
const getConnectionStats = () => {
  return {
    ...connectionStats,
    onlineUsers: Object.keys(userSocketMap).length,
    totalSockets: Object.values(userSocketMap).reduce(
      (total, sockets) => total + sockets.size,
      0
    ),
    activeRooms: Object.keys(roomParticipants).length,
  };
};
// X·ª≠ l√Ω k·∫øt n·ªëi Socket.IO ch√≠nh
io.on("connection", (socket) => {
  console.log("üîå New socket connection:", socket.id);
  const userId = socket.handshake.query.userId as string;
  console.log("üë§ UserId from query:", userId);

  // Ki·ªÉm tra userId h·ª£p l·ªá
  if (!userId || typeof userId !== "string" || userId.trim().length === 0) {
    logger.warning("‚ö†Ô∏è K·∫øt n·ªëi b·ªã t·ª´ ch·ªëi: Kh√¥ng c√≥ userId h·ª£p l·ªá");
    socket.emit("error", { message: "Thi·∫øu userId", code: "MISSING_USER_ID" });
    socket.disconnect();
    return;
  }

  // X·ª≠ l√Ω k·∫øt n·ªëi th√†nh c√¥ng
  handleUserConnection(socket, userId.trim());

  // ƒêƒÉng k√Ω c√°c event handlers

  // === CHAT EVENTS ===
  socket.on("sendMessage", (data) => {
    handleChatMessage(socket, { ...data, senderId: userId });
    console.log("üì® sendMessage event data:", data);
    // Log d·ªØ li·ªáu g·ª≠i tin nh·∫Øn ƒë·ªÉ debug
  });

  socket.on("joinRoom", (data) => {
    handleJoinRoom(socket, { ...data, userId });
  });
  //R·ªùi ph√≤ng
  socket.on("leaveRoom", (data) => {
    handleLeaveRoom(socket, { ...data, userId });
  });

  socket.on("sendRoomMessage", (data) => {
    handleRoomMessage(socket, { ...data, senderId: userId });
  });

  // === TYPING EVENTS ===
  //ƒëang g√µ
  socket.on("startTyping", (data) => {
    handleTypingStart(socket, { ...data, senderId: userId });
  });
  //ng·ª´ng g√µ
  socket.on("stopTyping", (data) => {
    handleTypingStop(socket, { ...data, senderId: userId });
  });

  // === MESSAGE EVENTS ===
  // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
  socket.on("markMessageSeen", (data) => {
    handleMarkMessageSeen(socket, { ...data, userId });
  });

  // === CALL EVENTS ===
  socket.on("sendPeerId", (data) => {
    handleSendPeerId(socket, { ...data, callerId: userId });
  });
  // Tr·∫£ l·ªùi cu·ªôc g·ªçi (ch·∫•p nh·∫≠n/t·ª´ ch·ªëi)
  socket.on("answerCall", (data) => {
    try {
      const { callerId, accepted } = data;
      if (!callerId || typeof accepted !== "boolean") {
        socket.emit("callError", {
          message: "D·ªØ li·ªáu tr·∫£ l·ªùi cu·ªôc g·ªçi kh√¥ng h·ª£p l·ªá",
        });
        return;
      }

      const callerSockets = getReceiverSocketIds(callerId);
      callerSockets.forEach((socketId: string) => {
        io.to(socketId).emit("callAnswered", { receiverId: userId, accepted });
      });

      // ‚úÖ N·∫æU T·ª™ CH·ªêI TH√å K·∫æT TH√öC CU·ªòC G·ªåI
      if (!accepted) {
        endCall(callerId, userId);
        logger.info(`üìû Cu·ªôc g·ªçi b·ªã t·ª´ ch·ªëi b·ªüi ${userId}`);
      } else {
        logger.info(`üìû Cu·ªôc g·ªçi ƒë∆∞·ª£c ch·∫•p nh·∫≠n b·ªüi ${userId}`);
      }
    } catch (error) {
      logger.error("L·ªói x·ª≠ l√Ω answer call:", error);
    }
  });

  socket.on("endCall", (data) => {
    try {
      const { receiverId } = data;
      if (!receiverId) return;

      // ‚úÖ K·∫æT TH√öC CU·ªòC G·ªåI
      endCall(userId, receiverId);

      const receiverSockets = getReceiverSocketIds(receiverId);
      receiverSockets.forEach((socketId: string) => {
        io.to(socketId).emit("callEnded", { callerId: userId });
      });

      logger.info(`üìû Cu·ªôc g·ªçi k·∫øt th√∫c gi·ªØa ${userId} v√† ${receiverId}`);
    } catch (error) {
      logger.error("L·ªói x·ª≠ l√Ω end call:", error);
    }
  });

  // ‚úÖ KI·ªÇM TRA TR·∫†NG TH√ÅI CU·ªòC G·ªåI
  socket.on("checkCallStatus", (data) => {
    try {
      const { targetUserId } = data;
      const isTargetInCall = targetUserId ? isUserInCall(targetUserId) : false;
      const isCurrentUserInCall = isUserInCall(userId);

      socket.emit("callStatusResponse", {
        targetUserId,
        targetUserInCall: isTargetInCall,
        currentUserInCall: isCurrentUserInCall,
        targetUserOnline: targetUserId ? isUserOnline(targetUserId) : false,
        callInfo: isCurrentUserInCall ? getUserCallInfo(userId) : null,
      });
    } catch (error) {
      logger.error("L·ªói ki·ªÉm tra tr·∫°ng th√°i cu·ªôc g·ªçi:", error);
      socket.emit("callError", {
        message: "L·ªói ki·ªÉm tra tr·∫°ng th√°i cu·ªôc g·ªçi",
        code: "CHECK_STATUS_ERROR",
      });
    }
  });

  // === NOTIFICATION EVENTS ===
  socket.on("sendNotification", (data) => {
    handleNotification(socket, data);
  });

  // === STATUS EVENTS ===
  socket.on("updateStatus", (data) => {
    try {
      const { status } = data;
      if (!status || !["online", "away", "busy"].includes(status)) {
        socket.emit("error", { message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
        return;
      }

      // Broadcast status change
      socket.broadcast.emit("userStatusChanged", {
        userId,
        status,
        lastActiveAt: new Date(),
      });

      logger.info(`üìä User ${userId} ƒë·ªïi tr·∫°ng th√°i th√†nh: ${status}`);
    } catch (error) {
      logger.error("L·ªói c·∫≠p nh·∫≠t status:", error);
    }
  });

  // === UTILITY EVENTS ===
  // L·∫•y danh s√°ch user online
  socket.on("getStats", () => {
    socket.emit("connectionStats", getConnectionStats());
  });
  // Ping-pong ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
  socket.on("ping", () => {
    socket.emit("pong", { timestamp: new Date() });
  });

  // === ERROR & DISCONNECT EVENTS ===
  socket.on("disconnect", (reason) => {
    logger.info(`üîå Socket disconnect: ${userId} | L√Ω do: ${reason}`);
    handleUserDisconnection(socket, userId);
  });

  socket.on("error", (error) => {
    logger.error(
      `‚ö†Ô∏è Socket error - User: ${userId}, Socket: ${socket.id}`,
      error
    );
  });

  // X·ª≠ l√Ω timeout
  socket.on("connect_error", (error) => {
    logger.error(`üî¥ Connection error - User: ${userId}`, error);
  });

  // Log k·∫øt n·ªëi th√†nh c√¥ng v·ªõi th√¥ng tin chi ti·∫øt
  logger.success(`üéØ Socket handlers ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω cho user: ${userId}`);
});

// Log khi socket server ƒë∆∞·ª£c kh·ªüi t·∫°o
console.log("üöÄ Socket.IO server initialized");
console.log(
  "üì° CORS origin:",
  process.env.FRONTEND_URL || "http://localhost:3000"
);
console.log("=============> Socket.IO k·∫øt n·ªëi th√†nh c√¥ng...üöÄ");

export { io, server, app };
