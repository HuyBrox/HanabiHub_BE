import { Response } from "express";
import mongoose from "mongoose";
import User from "../models/user.model";
import Message from "../models/message.model";
import Conversation from "../models/conversation.model";
import { getReceiverSocketIds, io } from "../socket/socket-server";
import { AuthRequest } from "../types/express.types";
import {
  SendMessageRequest,
  MarkMessagesAsReadRequest,
  GetMessagesRequest,
} from "../types/message.types";

// Utility ƒë·ªÉ convert string th√†nh ObjectId
const toObjectId = (id: string): mongoose.Types.ObjectId => {
  return new mongoose.Types.ObjectId(id);
};

// Utility ƒë·ªÉ validate ObjectId
const isValidObjectId = (id: string): boolean => {
  return mongoose.Types.ObjectId.isValid(id);
};

// Logger cho message controller
const logger = {
  info: (message: string, ...args: any[]) => {
    console.log(
      `üîµ [MESSAGE] [${new Date().toISOString()}] ${message}`,
      ...args
    );
  },
  success: (message: string, ...args: any[]) => {
    console.log(
      `üü¢ [MESSAGE] [${new Date().toISOString()}] ${message}`,
      ...args
    );
  },
  error: (message: string, ...args: any[]) => {
    console.log(
      `üî¥ [MESSAGE] [${new Date().toISOString()}] ${message}`,
      ...args
    );
  },
};

/**
 * G·ª≠i tin nh·∫Øn m·ªõi v√† l∆∞u v√†o database
 * T√≠ch h·ª£p v·ªõi socket ƒë·ªÉ g·ª≠i realtime
 */
export const sendMessage = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    const { receiverId, message } = req.body as SendMessageRequest;
    const senderId = req.user?.id;

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!senderId) {
      res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i",
      });
      return;
    }

    if (!receiverId || !message) {
      res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin ng∆∞·ªùi nh·∫≠n ho·∫∑c n·ªôi dung tin nh·∫Øn",
      });
      return;
    }

    if (!isValidObjectId(senderId) || !isValidObjectId(receiverId)) {
      res.status(400).json({
        success: false,
        message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá",
      });
      return;
    }

    if (message.trim().length === 0) {
      res.status(400).json({
        success: false,
        message: "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      });
      return;
    }

    if (message.length > 1000) {
      res.status(400).json({
        success: false,
        message: "Tin nh·∫Øn qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)",
      });
      return;
    }

    // Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n c√≥ t·ªìn t·∫°i kh√¥ng
    const receiver = await User.findById(receiverId);
    if (!receiver) {
      res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i",
      });
      return;
    }

    const senderObjectId = toObjectId(senderId);
    const receiverObjectId = toObjectId(receiverId);

    // T√¨m ho·∫∑c t·∫°o conversation
    let conversation = await Conversation.findOne({
      members: { $all: [senderObjectId, receiverObjectId] },
    });

    if (!conversation) {
      // T·∫°o conversation m·ªõi
      conversation = new Conversation({
        members: [senderObjectId, receiverObjectId],
        messages: [],
        unreadMessages: [
          { userId: senderObjectId, count: 0 },
          { userId: receiverObjectId, count: 0 },
        ],
      });
    }

    // T·∫°o tin nh·∫Øn m·ªõi
    const newMessage = new Message({
      senderId: senderObjectId,
      receiverId: receiverObjectId,
      message: message.trim(),
      isRead: false,
    });

    // L∆∞u tin nh·∫Øn
    const savedMessage = await newMessage.save();

    // C·∫≠p nh·∫≠t conversation
    conversation.messages.push(savedMessage._id);

    // TƒÉng s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc cho ng∆∞·ªùi nh·∫≠n
    const receiverUnread = conversation.unreadMessages.find(
      (unread) => unread.userId.toString() === receiverId
    );
    if (receiverUnread) {
      receiverUnread.count += 1;
    }

    await conversation.save();

    // Populate th√¥ng tin ng∆∞·ªùi g·ª≠i ƒë·ªÉ g·ª≠i qua socket
    const populatedMessage = await Message.findById(savedMessage._id)
      .populate("senderId", "fullname username avatar")
      .populate("receiverId", "fullname username avatar");

    // G·ª≠i tin nh·∫Øn qua socket realtime
    const receiverSockets = getReceiverSocketIds(receiverId);
    const messageData = {
      messageId: savedMessage._id.toString(),
      senderId,
      receiverId,
      message: message.trim(),
      messageType: "text",
      timestamp: savedMessage.createdAt,
      sender: {
        id: populatedMessage?.senderId._id,
        fullname: (populatedMessage?.senderId as any)?.fullname,
        username: (populatedMessage?.senderId as any)?.username,
        avatar: (populatedMessage?.senderId as any)?.avatar,
      },
      isRead: false,
    };

    // G·ª≠i t·ªõi t·∫•t c·∫£ socket c·ªßa ng∆∞·ªùi nh·∫≠n
    receiverSockets.forEach((socketId: string) => {
      io.to(socketId).emit("newMessage", messageData);
    });

    // G·ª≠i notification t·ªõi ng∆∞·ªùi nh·∫≠n
    receiverSockets.forEach((socketId: string) => {
      io.to(socketId).emit("notification", {
        type: "message",
        title: "Tin nh·∫Øn m·ªõi",
        message: `${
          (populatedMessage?.senderId as any)?.fullname
        } ƒë√£ g·ª≠i tin nh·∫Øn cho b·∫°n`,
        senderId,
        relatedId: savedMessage._id.toString(),
        timestamp: new Date(),
        isRead: false,
      });
    });

    logger.success(
      `Tin nh·∫Øn ƒë√£ g·ª≠i t·ª´ ${senderId} ƒë·∫øn ${receiverId}: "${message.substring(
        0,
        50
      )}${message.length > 50 ? "..." : ""}"`
    );

    // Tr·∫£ v·ªÅ response th√†nh c√¥ng
    res.status(201).json({
      success: true,
      message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng",
      data: {
        messageId: savedMessage._id,
        conversationId: conversation._id,
        message: messageData,
        receiverOnline: receiverSockets.length > 0,
      },
    });
  } catch (error) {
    logger.error("L·ªói g·ª≠i tin nh·∫Øn:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi g·ª≠i tin nh·∫Øn",
      error: process.env.NODE_ENV === "development" ? error : undefined,
    });
  }
};

/**
 * L·∫•y danh s√°ch tin nh·∫Øn gi·ªØa 2 user (conversation)
 * H·ªó tr·ª£ ph√¢n trang
 */
export const getMessages = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;
    const { receiverId } = req.params;
    const { page = 1, limit = 20 } = req.query as {
      page?: number;
      limit?: number;
    };

    if (!userId) {
      res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
      return;
    }

    if (!receiverId || !isValidObjectId(receiverId)) {
      res.status(400).json({
        success: false,
        message: "ID ng∆∞·ªùi nh·∫≠n kh√¥ng h·ª£p l·ªá",
      });
      return;
    }

    // Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n c√≥ t·ªìn t·∫°i kh√¥ng
    const receiver = await User.findById(receiverId);
    if (!receiver) {
      res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      });
      return;
    }

    const userObjectId = toObjectId(userId);
    const receiverObjectId = toObjectId(receiverId);

    // T√¨m conversation
    const conversation = await Conversation.findOne({
      members: { $all: [userObjectId, receiverObjectId] },
    });

    if (!conversation) {
      res.status(200).json({
        success: true,
        message: "Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o",
        data: {
          messages: [],
          pagination: {
            currentPage: Number(page),
            totalPages: 0,
            totalMessages: 0,
            hasNext: false,
            hasPrev: false,
          },
        },
      });
      return;
    }

    // L·∫•y tin nh·∫Øn v·ªõi ph√¢n trang
    const skip = (Number(page) - 1) * Number(limit);
    const totalMessages = await Message.countDocuments({
      $or: [
        { senderId: userObjectId, receiverId: receiverObjectId },
        { senderId: receiverObjectId, receiverId: userObjectId },
      ],
    });

    const messages = await Message.find({
      $or: [
        { senderId: userObjectId, receiverId: receiverObjectId },
        { senderId: receiverObjectId, receiverId: userObjectId },
      ],
    })
      .populate("senderId", "fullname username avatar")
      .populate("receiverId", "fullname username avatar")
      .sort({ createdAt: -1 }) // Tin nh·∫Øn m·ªõi nh·∫•t tr∆∞·ªõc
      .skip(skip)
      .limit(Number(limit));

    const totalPages = Math.ceil(totalMessages / Number(limit));

    logger.info(
      `L·∫•y ${messages.length} tin nh·∫Øn cho conversation ${userId} <-> ${receiverId}`
    );

    res.status(200).json({
      success: true,
      message: "L·∫•y tin nh·∫Øn th√†nh c√¥ng",
      data: {
        messages: messages.reverse(), // ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ tin nh·∫Øn c≈© ·ªü tr√™n
        pagination: {
          currentPage: Number(page),
          totalPages,
          totalMessages,
          hasNext: Number(page) < totalPages,
          hasPrev: Number(page) > 1,
        },
        conversation: {
          id: conversation._id,
          members: conversation.members,
        },
      },
    });
  } catch (error) {
    logger.error("L·ªói l·∫•y tin nh·∫Øn:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y tin nh·∫Øn",
      error: process.env.NODE_ENV === "development" ? error : undefined,
    });
  }
};

/**
 * ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
 * C·∫≠p nh·∫≠t realtime qua socket
 */
export const markMessagesAsRead = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;
    const { messageIds, senderId } = req.body as {
      messageIds: string[];
      senderId: string;
    };

    if (!userId) {
      res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
      return;
    }

    if (!messageIds || !Array.isArray(messageIds) || messageIds.length === 0) {
      res.status(400).json({
        success: false,
        message: "Danh s√°ch ID tin nh·∫Øn kh√¥ng h·ª£p l·ªá",
      });
      return;
    }

    if (!senderId || !isValidObjectId(senderId)) {
      res.status(400).json({
        success: false,
        message: "ID ng∆∞·ªùi g·ª≠i kh√¥ng h·ª£p l·ªá",
      });
      return;
    }

    // Validate t·∫•t c·∫£ messageIds
    const validMessageIds = messageIds.filter((id) => isValidObjectId(id));
    if (validMessageIds.length === 0) {
      res.status(400).json({
        success: false,
        message: "Kh√¥ng c√≥ ID tin nh·∫Øn h·ª£p l·ªá",
      });
      return;
    }

    const userObjectId = toObjectId(userId);
    const senderObjectId = toObjectId(senderId);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ƒë·ªçc cho c√°c tin nh·∫Øn
    const result = await Message.updateMany(
      {
        _id: { $in: validMessageIds.map((id) => toObjectId(id)) },
        receiverId: userObjectId, // Ch·ªâ user nh·∫≠n m·ªõi c√≥ th·ªÉ mark as read
        senderId: senderObjectId,
        isRead: false,
      },
      {
        $set: { isRead: true },
      }
    );

    // C·∫≠p nh·∫≠t s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc trong conversation
    const conversation = await Conversation.findOne({
      members: { $all: [userObjectId, senderObjectId] },
    });

    if (conversation) {
      const userUnread = conversation.unreadMessages.find(
        (unread) => unread.userId.toString() === userId
      );
      if (userUnread) {
        userUnread.count = Math.max(0, userUnread.count - result.modifiedCount);
        await conversation.save();
      }
    }

    // G·ª≠i th√¥ng b√°o qua socket cho ng∆∞·ªùi g·ª≠i
    const senderSockets = getReceiverSocketIds(senderId);
    validMessageIds.forEach((messageId) => {
      senderSockets.forEach((socketId: string) => {
        io.to(socketId).emit("messageSeen", {
          messageId,
          userId,
          seenAt: new Date(),
          seenBy: {
            id: userId,
            fullname: req.user?.name,
          },
        });
      });
    });

    logger.success(
      `${result.modifiedCount} tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc b·ªüi ${userId}`
    );

    res.status(200).json({
      success: true,
      message: `${result.modifiedCount} tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc`,
      data: {
        markedCount: result.modifiedCount,
        totalRequested: validMessageIds.length,
      },
    });
  } catch (error) {
    logger.error("L·ªói ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc",
      error: process.env.NODE_ENV === "development" ? error : undefined,
    });
  }
};

/**
 * L·∫•y danh s√°ch c√°c cu·ªôc tr√≤ chuy·ªán c·ªßa user
 * Bao g·ªìm th√¥ng tin tin nh·∫Øn m·ªõi nh·∫•t v√† s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
 */
export const getConversations = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;
    const { page = 1, limit = 20 } = req.query as {
      page?: number;
      limit?: number;
    };

    if (!userId) {
      res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
      return;
    }

    const userObjectId = toObjectId(userId);
    const skip = (Number(page) - 1) * Number(limit);

    // L·∫•y t·∫•t c·∫£ conversations c·ªßa user
    const conversations = await Conversation.find({
      members: userObjectId,
    })
      .populate("members", "fullname username avatar lastActiveAt isOnline")
      .populate({
        path: "messages",
        options: { sort: { createdAt: -1 }, limit: 1 }, // Ch·ªâ l·∫•y tin nh·∫Øn m·ªõi nh·∫•t
        populate: {
          path: "senderId receiverId",
          select: "fullname username avatar",
        },
      })
      .sort({ updatedAt: -1 }) // Conversation c√≥ ho·∫°t ƒë·ªông m·ªõi nh·∫•t tr∆∞·ªõc
      .skip(skip)
      .limit(Number(limit));

    // Format d·ªØ li·ªáu tr·∫£ v·ªÅ
    const formattedConversations = conversations.map((conv) => {
      const otherMember = (conv.members as any[]).find(
        (member) => member._id.toString() !== userId
      );

      const unreadCount =
        conv.unreadMessages.find(
          (unread) => unread.userId.toString() === userId
        )?.count || 0;

      const lastMessage = (conv.messages as any[])[0] || null;

      return {
        conversationId: conv._id,
        participant: {
          id: otherMember?._id,
          fullname: otherMember?.fullname,
          username: otherMember?.username,
          avatar: otherMember?.avatar,
          isOnline: otherMember?.isOnline || false,
          lastActiveAt: otherMember?.lastActiveAt,
        },
        lastMessage: lastMessage
          ? {
              id: lastMessage._id,
              message: lastMessage.message,
              senderId: lastMessage.senderId._id,
              senderName: lastMessage.senderId.fullname,
              timestamp: lastMessage.createdAt,
              isRead: lastMessage.isRead,
            }
          : null,
        unreadCount,
        lastActivity: conv.updatedAt,
      };
    });

    const totalConversations = await Conversation.countDocuments({
      members: userObjectId,
    });

    const totalPages = Math.ceil(totalConversations / Number(limit));

    logger.info(
      `L·∫•y ${conversations.length} cu·ªôc tr√≤ chuy·ªán cho user ${userId}`
    );

    res.status(200).json({
      success: true,
      message: "L·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng",
      data: {
        conversations: formattedConversations,
        pagination: {
          currentPage: Number(page),
          totalPages,
          totalConversations,
          hasNext: Number(page) < totalPages,
          hasPrev: Number(page) > 1,
        },
      },
    });
  } catch (error) {
    logger.error("L·ªói l·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán",
      error: process.env.NODE_ENV === "development" ? error : undefined,
    });
  }
};

/**
 * X√≥a tin nh·∫Øn (soft delete ho·∫∑c hard delete)
 * Th√¥ng b√°o realtime cho ng∆∞·ªùi nh·∫≠n
 */
export const deleteMessage = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;
    const { messageId } = req.params;
    const { deleteForEveryone = false } = req.body as {
      deleteForEveryone?: boolean;
    };

    if (!userId) {
      res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
      return;
    }

    if (!messageId || !isValidObjectId(messageId)) {
      res.status(400).json({
        success: false,
        message: "ID tin nh·∫Øn kh√¥ng h·ª£p l·ªá",
      });
      return;
    }

    // T√¨m tin nh·∫Øn
    const message = await Message.findById(messageId);
    if (!message) {
      res.status(404).json({
        success: false,
        message: "Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i",
      });
      return;
    }

    // Ki·ªÉm tra quy·ªÅn x√≥a tin nh·∫Øn
    if (message.senderId.toString() !== userId) {
      res.status(403).json({
        success: false,
        message: "B·∫°n ch·ªâ c√≥ th·ªÉ x√≥a tin nh·∫Øn c·ªßa ch√≠nh m√¨nh",
      });
      return;
    }

    if (deleteForEveryone) {
      // X√≥a cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi
      message.message = "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x√≥a";
      message.isRead = true; // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc ƒë·ªÉ kh√¥ng g√¢y confusion
      await message.save();

      // Th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n
      const receiverSockets = getReceiverSocketIds(
        message.receiverId.toString()
      );
      receiverSockets.forEach((socketId: string) => {
        io.to(socketId).emit("messageDeleted", {
          messageId,
          deletedAt: new Date(),
          deletedBy: userId,
          deletedForEveryone: true,
        });
      });

      logger.info(`Tin nh·∫Øn ${messageId} ƒë√£ ƒë∆∞·ª£c x√≥a cho t·∫•t c·∫£ b·ªüi ${userId}`);

      res.status(200).json({
        success: true,
        message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x√≥a cho t·∫•t c·∫£",
        data: {
          messageId,
          deletedForEveryone: true,
        },
      });
    } else {
      // Ch·ªâ x√≥a cho b·∫£n th√¢n (soft delete)
      // Trong th·ª±c t·∫ø c√≥ th·ªÉ c·∫ßn th√™m field deletedFor: [userId] v√†o schema
      res.status(200).json({
        success: true,
        message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x√≥a cho b·∫°n",
        data: {
          messageId,
          deletedForEveryone: false,
        },
      });
    }
  } catch (error) {
    logger.error("L·ªói x√≥a tin nh·∫Øn:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi x√≥a tin nh·∫Øn",
      error: process.env.NODE_ENV === "development" ? error : undefined,
    });
  }
};

/**
 * T√¨m ki·∫øm tin nh·∫Øn trong conversation
 */
export const searchMessages = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;
    const { receiverId } = req.params;
    const {
      query,
      page = 1,
      limit = 20,
    } = req.query as {
      query?: string;
      page?: number;
      limit?: number;
    };

    if (!userId) {
      res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
      return;
    }

    if (!receiverId || !isValidObjectId(receiverId)) {
      res.status(400).json({
        success: false,
        message: "ID ng∆∞·ªùi nh·∫≠n kh√¥ng h·ª£p l·ªá",
      });
      return;
    }

    if (!query || query.trim().length === 0) {
      res.status(400).json({
        success: false,
        message: "T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      });
      return;
    }

    const userObjectId = toObjectId(userId);
    const receiverObjectId = toObjectId(receiverId);
    const skip = (Number(page) - 1) * Number(limit);

    // T√¨m ki·∫øm tin nh·∫Øn
    const searchFilter = {
      $or: [
        { senderId: userObjectId, receiverId: receiverObjectId },
        { senderId: receiverObjectId, receiverId: userObjectId },
      ],
      message: { $regex: query.trim(), $options: "i" }, // Case insensitive search
    };

    const totalResults = await Message.countDocuments(searchFilter);

    const messages = await Message.find(searchFilter)
      .populate("senderId", "fullname username avatar")
      .populate("receiverId", "fullname username avatar")
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(Number(limit));

    const totalPages = Math.ceil(totalResults / Number(limit));

    logger.info(
      `T√¨m ki·∫øm "${query}" cho conversation ${userId} <-> ${receiverId}: ${totalResults} k·∫øt qu·∫£`
    );

    res.status(200).json({
      success: true,
      message: "T√¨m ki·∫øm tin nh·∫Øn th√†nh c√¥ng",
      data: {
        messages,
        pagination: {
          currentPage: Number(page),
          totalPages,
          totalResults,
          hasNext: Number(page) < totalPages,
          hasPrev: Number(page) > 1,
        },
        searchQuery: query.trim(),
      },
    });
  } catch (error) {
    logger.error("L·ªói t√¨m ki·∫øm tin nh·∫Øn:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi t√¨m ki·∫øm tin nh·∫Øn",
      error: process.env.NODE_ENV === "development" ? error : undefined,
    });
  }
};

/**
 * L·∫•y th·ªëng k√™ tin nh·∫Øn cho user
 */
export const getMessageStats = async (
  req: AuthRequest,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;

    if (!userId) {
      res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
      return;
    }

    const userObjectId = toObjectId(userId);

    // ƒê·∫øm tin nh·∫Øn ƒë√£ g·ª≠i
    const sentMessages = await Message.countDocuments({
      senderId: userObjectId,
    });

    // ƒê·∫øm tin nh·∫Øn ƒë√£ nh·∫≠n
    const receivedMessages = await Message.countDocuments({
      receiverId: userObjectId,
    });

    // ƒê·∫øm tin nh·∫Øn ch∆∞a ƒë·ªçc
    const unreadMessages = await Message.countDocuments({
      receiverId: userObjectId,
      isRead: false,
    });

    // ƒê·∫øm s·ªë cu·ªôc tr√≤ chuy·ªán
    const totalConversations = await Conversation.countDocuments({
      members: userObjectId,
    });

    // T·ªïng s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc t·ª´ t·∫•t c·∫£ conversations
    const conversations = await Conversation.find({ members: userObjectId });
    const totalUnreadFromConversations = conversations.reduce((total, conv) => {
      const userUnread = conv.unreadMessages.find(
        (unread) => unread.userId.toString() === userId
      );
      return total + (userUnread?.count || 0);
    }, 0);

    logger.info(`L·∫•y th·ªëng k√™ tin nh·∫Øn cho user ${userId}`);

    res.status(200).json({
      success: true,
      message: "L·∫•y th·ªëng k√™ tin nh·∫Øn th√†nh c√¥ng",
      data: {
        sentMessages,
        receivedMessages,
        totalMessages: sentMessages + receivedMessages,
        unreadMessages,
        totalConversations,
        totalUnreadFromConversations,
        lastUpdated: new Date(),
      },
    });
  } catch (error) {
    logger.error("L·ªói l·∫•y th·ªëng k√™ tin nh·∫Øn:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y th·ªëng k√™ tin nh·∫Øn",
      error: process.env.NODE_ENV === "development" ? error : undefined,
    });
  }
};
